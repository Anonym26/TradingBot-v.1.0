import logging
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
from dotenv import load_dotenv
import os
import asyncio
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
API_ID = os.getenv("TELEGRAM_API_ID_2")
API_HASH = os.getenv("TELEGRAM_API_HASH_2")
SESSION_NAME = "session_name"
CHAT_ID = "@ai_for_live_content"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="logs/test_telegram_message.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding="utf-8"  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
)

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
client = TelegramClient(
    SESSION_NAME, API_ID, API_HASH,
    system_version='4.16.30-vxCUSTOM',
    device_model="iPhone 13 Pro Max",
    app_version="8.4",
    lang_code="en",
    system_lang_code="en-US"
)

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
BUY_PATTERN = re.compile(r"([A-Z0-9]+)(?=/USDT).*?LONG.*?‚úÖ\s*BUYING COMPLETED", re.IGNORECASE | re.DOTALL)
SELL_PATTERN = re.compile(r"([A-Z0-9]+)(?=/USDT).*?üÜë\s*POSITION\s*CLOSED", re.IGNORECASE | re.DOTALL)


async def handle_new_message(event):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    try:
        message = event.message.message.strip()
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
        buy_match = BUY_PATTERN.search(message)
        if buy_match:
            asset = buy_match.group(1)
            logging.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: Buy {asset}")
            print(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É: Buy {asset}")
            return "Buy", asset

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏
        sell_match = SELL_PATTERN.search(message)
        if sell_match:
            asset = sell_match.group(1)
            logging.info(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: Sell {asset}")
            print(f"–°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: Sell {asset}")
            return "Sell", asset

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É
        logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")
        buy_match = BUY_PATTERN.search(message)
        sell_match = SELL_PATTERN.search(message)
        print(f"BUY_PATTERN: {buy_match}")
        print(f"SELL_PATTERN: {sell_match}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def ensure_connection():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram –∏ –µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ.
    """
    while True:
        try:
            if not client.is_connected():
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                logging.warning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                await client.connect()
                print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥


async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã.
    """
    print("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram...")
    try:
        await client.start()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not await client.is_user_authorized():
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
            await client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä: ")
            try:
                await client.sign_in(phone, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ")
                await client.sign_in(password=password)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ entity –∫–∞–Ω–∞–ª–∞
        try:
            channel_entity = await client.get_entity(CHAT_ID)
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É: {channel_entity.title}")
            logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É {channel_entity.title} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(chats=channel_entity))
        async def new_message_listener(event):
            await handle_new_message(event)

        print("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logging.info("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")

        # –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        asyncio.create_task(ensure_connection())

        # –£–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await client.run_until_disconnected()
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    try:
        with client:
            client.loop.run_until_complete(main())
    except KeyboardInterrupt:
        print("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        logging.info("–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
