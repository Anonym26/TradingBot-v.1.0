import asyncio
import logging
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
BUY_PATTERN = re.compile(r"([A-Z0-9]+)(?=/USDT).*?LONG.*?‚úÖ\s*BUYING COMPLETED", re.IGNORECASE | re.DOTALL)
SELL_PATTERN = re.compile(r"([A-Z0-9]+)(?=/USDT).*?üÜë\s*POSITION\s*CLOSED", re.IGNORECASE | re.DOTALL)

class TelegramHandler:
    """
       –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ,
       –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
    """
    def __init__(self, api_id, api_hash, session_name, chat_id):
        self.client = TelegramClient(session_name, api_id, api_hash)
        self.chat_id = chat_id
        self.channel_entity = None

    async def start_client(self):
        """
        –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
        """
        await self.client.start()
        if not await self.client.is_user_authorized():
            print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
            phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ")
            await self.client.send_code_request(phone)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –≤–∞—à –Ω–æ–º–µ—Ä: ")
            try:
                await self.client.sign_in(phone, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å: ")
                await self.client.sign_in(password=password)
        logging.info("–ö–ª–∏–µ–Ω—Ç Telegram —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

    async def connect_to_channel(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ entity –∫–∞–Ω–∞–ª–∞.
        """
        try:
            self.channel_entity = await self.client.get_entity(self.chat_id)
            logging.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É {self.channel_entity.title} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É: {e}")
            raise e

    async def listen_to_messages(self, callback):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        """
        @self.client.on(events.NewMessage(chats=self.channel_entity))
        async def new_message_listener(event):
            message = event.message.message.strip()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.splitlines()[0]}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª –ø–æ–∫—É–ø–∫–∏
            if BUY_PATTERN.search(message):
                asset = BUY_PATTERN.search(message).group(1)
                await callback("Buy", asset)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∏–≥–Ω–∞–ª –ø—Ä–æ–¥–∞–∂–∏
            if SELL_PATTERN.search(message):
                asset = SELL_PATTERN.search(message).group(1)
                await callback("Sell", asset)
                return

            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤.")

    async def ensure_connection(self):
        """
        –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram.
        """
        while True:
            if not self.client.is_connected():
                logging.warning("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                await self.client.connect()
                logging.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            await asyncio.sleep(30)

    async def run(self, callback):
        """
        –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        """
        await self.start_client()
        await self.connect_to_channel()
        await self.listen_to_messages(callback)
        asyncio.create_task(self.ensure_connection())
        await self.client.run_until_disconnected()
